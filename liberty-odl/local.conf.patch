1,17d0
< # Sample ``local.conf`` for user-configurable variables in ``stack.sh``
< 
< # NOTE: Copy this file to the root DevStack directory for it to work properly.
< 
< # ``local.conf`` is a user-maintained settings file that is sourced from ``stackrc``.
< # This gives it the ability to override any variables set in ``stackrc``.
< # Also, most of the settings in ``stack.sh`` are written to only be set if no
< # value has already been set; this lets ``local.conf`` effectively override the
< # default values.
< 
< # This is a collection of some of the settings we have found to be useful
< # in our DevStack development environments. Additional settings are described
< # in http://devstack.org/local.conf.html
< # These should be considered as samples and are unsupported DevStack code.
< 
< # The ``localrc`` section replaces the old ``localrc`` configuration file.
< # Note that if ``localrc`` is present it will be used in favor of this section.
19,101c2,111
< 
< # Minimal Contents
< # ----------------
< 
< # While ``stack.sh`` is happy to run without ``localrc``, devlife is better when
< # there are a few minimal variables set:
< 
< # If the ``SERVICE_TOKEN`` and ``*_PASSWORD`` variables are not set
< # here you will be prompted to enter values for them by ``stack.sh``
< # and they will be added to ``local.conf``.
< SERVICE_TOKEN=azertytoken
< ADMIN_PASSWORD=nomoresecrete
< MYSQL_PASSWORD=stackdb
< RABBIT_PASSWORD=stackqueue
< SERVICE_PASSWORD=$ADMIN_PASSWORD
< 
< # ``HOST_IP`` and ``HOST_IPV6`` should be set manually for best results if
< # the NIC configuration of the host is unusual, i.e. ``eth1`` has the default
< # route but ``eth0`` is the public interface.  They are auto-detected in
< # ``stack.sh`` but often is indeterminate on later runs due to the IP moving
< # from an Ethernet interface to a bridge on the host. Setting it here also
< # makes it available for ``openrc`` to include when setting ``OS_AUTH_URL``.
< # Neither is set by default.
< #HOST_IP=w.x.y.z
< #HOST_IPV6=2001:db8::7
< 
< 
< # Logging
< # -------
< 
< # By default ``stack.sh`` output only goes to the terminal where it runs.  It can
< # be configured to additionally log to a file by setting ``LOGFILE`` to the full
< # path of the destination log file.  A timestamp will be appended to the given name.
< LOGFILE=$DEST/logs/stack.sh.log
< 
< # Old log files are automatically removed after 7 days to keep things neat.  Change
< # the number of days by setting ``LOGDAYS``.
< LOGDAYS=2
< 
< # Nova logs will be colorized if ``SYSLOG`` is not set; turn this off by setting
< # ``LOG_COLOR`` false.
< #LOG_COLOR=False
< 
< 
< # Using milestone-proposed branches
< # ---------------------------------
< 
< # Uncomment these to grab the milestone-proposed branches from the repos:
< #CINDER_BRANCH=milestone-proposed
< #GLANCE_BRANCH=milestone-proposed
< #HORIZON_BRANCH=milestone-proposed
< #KEYSTONE_BRANCH=milestone-proposed
< #KEYSTONECLIENT_BRANCH=milestone-proposed
< #NOVA_BRANCH=milestone-proposed
< #NOVACLIENT_BRANCH=milestone-proposed
< #NEUTRON_BRANCH=milestone-proposed
< #SWIFT_BRANCH=milestone-proposed
< 
< 
< # Swift
< # -----
< 
< # Swift is now used as the back-end for the S3-like object store. If Nova's
< # objectstore (``n-obj`` in ``ENABLED_SERVICES``) is enabled, it will NOT
< # run if Swift is enabled. Setting the hash value is required and you will
< # be prompted for it if Swift is enabled so just set it to something already:
< SWIFT_HASH=66a3d6b56c1f479c8b4e70ab5c2000f5
< 
< # For development purposes the default of 3 replicas is usually not required.
< # Set this to 1 to save some resources:
< SWIFT_REPLICAS=1
< 
< # The data for Swift is stored by default in (``$DEST/data/swift``),
< # or (``$DATA_DIR/swift``) if ``DATA_DIR`` has been set, and can be
< # moved by setting ``SWIFT_DATA_DIR``. The directory will be created
< # if it does not exist.
< SWIFT_DATA_DIR=$DEST/data
< 
< # Tempest
< # -------
< 
< # Install the tempest test suite
< enable_service tempest
---
> # put the log files in a dir different than the source so they can be manipulated independently
> LOGFILE=/opt/stack/logs/stack.sh.log
> SCREEN_LOGDIR=/opt/stack/logs
> LOG_COLOR=False
> # flip OFFLINE and RECLONE to lock (RECLONE=no) or update the source.
> OFFLINE=True
> RECLONE=no
> VERBOSE=True
> 
> # disable everything so we can explicitly enable only what we need
> disable_all_services
> 
> #enable_plugin kuryr https://git.openstack.org/openstack/kuryr
> #enable_service kuryr
> #enable_service etcd-server
> #enable_service docker-engine
> 
> # Core compute (glance+keystone+nova+vnc)
> enable_service g-api g-reg key n-api n-crt n-obj n-cpu n-cond n-sch n-novnc n-xvnc n-cauth
> # dashboard
> enable_service horizon
> # network. uncomment only one of the next two lines depending on if you want odl or the l2 agent
> # next line enables default l2 agent and not odl
> #enable_service neutron q-agt q-dhcp q-l3 q-meta q-svc
> # next line enables odl as the neutron backend rather than the l2 agent
> #enable_service neutron q-dhcp q-meta q-svc odl-compute odl-neutron
> # or use the allinone
> enable_service neutron q-dhcp q-meta q-svc odl-server odl-compute
> # uncommment next only if you want to use the openstack l3 agent
> #enable_service q-l3
> # additional services
> enable_service mysql rabbit
> # load-balancer, tempest
> #enable_service q-lbaas
> 
> HOST_IP=192.168.254.31
> HOST_NAME=odl31
> SERVICE_HOST_NAME=$HOST_NAME
> SERVICE_HOST=$HOST_IP
> Q_HOST=$SERVICE_HOST
> 
> # openvswitch ml2 vlan+tunnels
> #ML2_VLAN_RANGES=physnet1:2000:2999
> #ENABLE_TENANT_VLANS=True
> #ENABLE_TENANT_TUNNELS=True
> ## If using OVS_BRIDGE_MAPPINGS, you need to manually add the bridges.
> #NEUTRON_CREATE_INITIAL_NETWORKS=False
> # L3 setup
> #OVS_BRIDGE_MAPPINGS=public:br-ex,physnet1:br-eth1
> 
> # opendaylight ml2 vlan and gre tunnels
> enable_plugin networking-odl http://git.openstack.org/openstack/networking-odl
> # this repo has fix for the security groups problem
> #enable_plugin networking-odl https://github.com/flavio-fernandes/networking-odl summit15demo
> # comment out ODL_MGR_IP and OLD_PORT if using odl-server as networking-odl wants to set them
> ODL_OFFLINE=True
> ODL_CLEAN=True
> ODL_MODE=manual
> #ODL_PORT=8080
> #ODL_MGR_IP=192.168.120.1
> ML2_VLAN_RANGES=physnet1:2000:2999
> NEUTRON_CREATE_INITIAL_NETWORKS=False
> # Use the below to capture logs when using allinone
> ODL_NETVIRT_DEBUG_LOGS=False
> # The next config is for ODL l3
> ODL_L3=True
> # Use the following to automatically add eth2 to br-ex
> #PUBLIC_INTERFACE=eth2
> ODL_PROVIDER_MAPPINGS=br-ex:eth2
> # Add some time for odl to start before starting neutron
> # Also set ODL_BOOT_WAIT_URL to empty to use ODL_BOOT_WAIT
> #ODL_BOOT_WAIT=120
> # To override the l3 gw for external traffic. Shouldn't be needed since ODL will ARP for the value
> #ODL_L3GW_MAC=52:54:00:34:10:b5
> 
> ODL_RELEASE=beryllium-snapshot-0.4.1
> ODL_BOOT_WAIT_URL='restconf/operational/network-topology:network-topology/topology/netvirt:1'
> 
> VNCSERVER_PROXYCLIENT_ADDRESS=$HOST_IP
> VNCSERVER_LISTEN=0.0.0.0
> 
> DATABASE_PASSWORD=mysql
> RABBIT_PASSWORD=rabbit
> QPID_PASSWORD=rabbit
> SERVICE_TOKEN=service
> SERVICE_PASSWORD=admin
> ADMIN_PASSWORD=admin
> 
> # use master for latest
> BRANCH=stable/liberty
> GLANCE_BRANCH=$BRANCH
> HORIZON_BRANCH=$BRANCH
> KEYSTONE_BRANCH=$BRANCH
> NOVA_BRANCH=$BRANCH
> NEUTRON_BRANCH=$BRANCH
> SWIFT_BRANCH=$BRANCH
> ##CLIFF_BRANCH=$BRANCH
> ##TEMPEST_BRANCH=$BRANCH
> CINDER_BRANCH=$BRANCH
> HEAT_BRANCH=$BRANCH
> TROVE_BRANCH=$BRANCH
> CEILOMETER_BRANCH=$BRANCH
> 
> [[post-config|/etc/neutron/plugins/ml2/ml2_conf.ini]]
> [agent]
> minimize_polling=True
> 
> [[post-config|$NEUTRON_CONF]]
> [DEFAULT]
> service_plugins = networking_odl.l3.l3_odl.OpenDaylightL3RouterPlugin
